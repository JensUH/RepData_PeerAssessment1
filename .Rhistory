find.package("devtools")
install.packages("devtools")
find.package("devtools")
liberary
library(devtools)
find_rtools()
install.package("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
3L
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVetore(c(3.4,4.3,5,6667))
makeVector(c(3.4,4.3,5,6667))
y <- makeVector(c(3.4,4.3,5,6667))
y
y.getmean
y$get
y$getmean
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean
cachemean(y)
y
y$get
y$getmean
y
y$getmean
y$get
y
y <- makeVector(c(1,2,3,4))
y
y$get
y$get()
y$getmean()
cachemean(y)
y$getmean()
cachemean(y)
m
y
y$get
y$get()
y$set()
y$set(c(1,3))
y$get
y$get()
y$getmean()
cachemean(y)
y$gtmean()
y$getmean()
cachemean(y)
s <- c(3,5,6)
s
s$3
s$2
list(3,4,5)
list$2
list$2()
list[2]
s <- list(3,4,5)
s
s$2
s$2()
s
s[2]
s[[2]
]
s[[2]]
s <- numeric()
s
r <- matrix()
r
x <- matrix(c(1,2),c(3,3))
x <- matrix(c(1,2,3,4))
x
x <- matrix(c(1,2,3,4),2)
x
solve(x)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(mat) inv <<- mat
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) {
invs <- x$getinv()
if(!is.null(invs)) {
message("getting cached data")
return(invs)
}
mat <- x$get()
invs <- solve(mat, ...)
x$setinv(invs)
invs
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix
amatrix$get()
amatrix$getinv()
cacheSolve(amatrix)
amatrix$getinv()
cacheSolve(amatrix)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(mat) inv <<- mat
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
invs <- x$getinverse()
if(!is.null(invs)) {
message("getting cached data")
return(invs)
}
mat <- x$get()
invs <- solve(mat, ...)
x$setinverse(invs)
invs
}
amatrix$set(matrix(0,5,99,66), nrow=2,ncol=2))
amatrix$set(matrix(c(0,5,99,66), nrow=2,ncol=2))
amatrix
amatrix$get()
cacheSovle(amatrix)
cacheSolve(amatrix)
amatrix$getinverse
cacheSolve <- function(x, ...) {
invs <- x$getinverse()
if(!is.null(invs)) {
message("getting cached data")
return(invs)
}
mat <- x$get()
invs <- solve(mat, ...)
x$setinverse(invs)
invs
}
cacheSolve(amatrix)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(mat) inv <<- mat
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
invs <- x$getinverse()
if(!is.null(invs)) {
message("getting cached data")
return(invs)
}
mat <- x$get()
invs <- solve(mat, ...)
x$setinverse(invs)
invs
}
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
amatrix
amatrix$get()
amatrix$getinvers()
amatrix$getinverse()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(mat) inv <<- mat
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix(matrix(c(0,5,99,66), nrow=2, ncol=2))
amatrix = makeCacheMatrix(matrix(c(0,5,99,66), nrow=2, ncol=2))
amatrix
amatrix$get()
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$getinverse
amatrix$getinverse
amatrix$getinverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(mat) inv <<- mat
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve(amatrix)
amatrix$Get()
amatrix$get()
amatrix$getinverse()
setwd("C:/Users/Jens/Dropbox/Coursera/Data Science Specialization/Reproducible Research/RepData_PeerAssessment1")
install.packages("stringr")
install.packages("ggplot2")
install.packages("scales")
